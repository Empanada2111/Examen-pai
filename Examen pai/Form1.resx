<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>